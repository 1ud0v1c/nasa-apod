plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'com.google.devtools.ksp'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'androidx.navigation.safeargs.kotlin'
    id 'com.google.android.gms.oss-licenses-plugin'
    id 'kover'
}

def getVersionProperties() {
    Properties properties = new Properties()
    file("version.properties").withInputStream {
        properties.load(it)
    }
    return properties
}

def getVersionName() {
    Properties properties = getVersionProperties()
    String major = properties["version.major"]
    String minor = properties["version.minor"]
    String patch = properties["version.patch"]
    return "$major.$minor.$patch"
}

def getVersionCode() {
    Properties properties = getVersionProperties()
    String major = properties["version.major"]
    String minor = properties["version.minor"]
    String patch = properties["version.patch"]
    return major.toInteger() * 10_000 + minor.toInteger() * 100 + patch.toInteger()
}

def computedVersionName = getVersionName()
def computedVersionCode = getVersionCode()

android {
    compileSdk 34
    namespace "com.ludovic.vimont.nasaapod"

    defaultConfig {
        applicationId "com.ludovic.vimont.nasaapod"
        minSdkVersion 21
        targetSdkVersion 34
        versionCode computedVersionCode
        versionName computedVersionName
        buildConfigField "int", "VERSION_CODE", computedVersionCode.toString()
        buildConfigField "String", "VERSION_NAME", "\"${computedVersionName}\""
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments["room.schemaLocation"] = "$projectDir/schemas"
            }
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }

    buildFeatures {
        buildConfig true
        viewBinding true
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            all {
                ignoreFailures false
                testLogging {
                    events "passed", "skipped", "failed", "standardOut", "standardError"
                }
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

afterEvaluate {
    tasks.withType(Test.class).configureEach {
        kover {
            excludes.addAll("*.databinding.*")
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    // Android
    implementation libs.androidx.appcompat
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.core.ktx
    implementation libs.androidx.fragment
    implementation libs.androidx.material
    implementation libs.androidx.navigation.fragment
    implementation libs.androidx.navigation.ui
    implementation libs.androidx.preference
    implementation libs.androidx.recyclerview
    ksp libs.androidx.room.compiler
    implementation libs.androidx.room.ktx
    implementation libs.androidx.room.runtime
    implementation libs.androidx.swiperefreshlayout
    implementation libs.androidx.work.runtime
    implementation libs.androidx.work.runtime.ktx

    // DI
    implementation libs.koin.android
    implementation libs.koin.core

    // Firebase
    implementation libs.firebase.analytics
    implementation libs.firebase.crashlytics

    // Glide for Image loading
    implementation libs.glide
    implementation libs.glide.okhttp
    ksp libs.glide.compiler

    // Kotlin
    implementation libs.kotlinx.coroutines
    implementation libs.kotlinx.coroutines.android

    // Open Source Notices
    implementation libs.play.services.oss.licenses

    // PhotoView
    implementation libs.photo.view

    // Retrofit
    implementation libs.retrofit
    implementation libs.retrofit.moshi

    // RoundedImageView, to help fix an issue with Glide @see: https://github.com/bumptech/glide#compatibility
    implementation libs.rounded.image.view

    // Unit tests
    testImplementation libs.androidx.arch.core.testing
    testImplementation libs.androidx.test.core
    testImplementation libs.androidx.work.testing
    testImplementation libs.junit
    testImplementation libs.koin.test
    testImplementation libs.kotlinx.coroutines.test
    testImplementation libs.robolectric

    // Integration tests
    androidTestImplementation libs.androidx.arch.core.testing
    androidTestImplementation libs.androidx.espresso.contrib
    androidTestImplementation libs.androidx.espresso.core
    androidTestImplementation libs.androidx.espresso.intents
    androidTestImplementation libs.androidx.navigation.testing
    androidTestImplementation libs.androidx.test.junit
    androidTestImplementation libs.androidx.test.rules
}
